// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.App = (function(_super) {
  __extends(App, _super);

  function App() {
    this.playerStands = __bind(this.playerStands, this);
    this.blackjackCloseOut = __bind(this.blackjackCloseOut, this);
    this.checkForBlackjack = __bind(this.checkForBlackjack, this);
    return App.__super__.constructor.apply(this, arguments);
  }

  App.prototype.initialize = function() {
    var deck;
    this.set('deck', deck = new Deck());
    this.set('playerHand', deck.dealPlayer());
    this.set('dealerHand', deck.dealDealer());
    this.set('handStatus', 'open');
    this.get('deck').on('dealPlayer', setTimeout(this.checkForBlackjack, 1500));
    return this.get('playerHand').on('stand', (function(_this) {
      return function() {
        return _this.playerStands();
      };
    })(this));
  };

  App.prototype.checkForBlackjack = function() {
    console.log(this.get('dealerHand').scores()[0]);
    if (this.get('playerHand').scores()[0] === 21) {
      return setTimeout(this.blackjackCloseOut, 1500);
    }
  };

  App.prototype.blackjackCloseOut = function() {
    if (this.get('playerHand').scores()[0] === 21) {
      return this.set('handStatus', 'playerBlackjack');
    }
  };

  App.prototype.playerStands = function() {
    var playerScore, _results;
    setTimeout(((function(_this) {
      return function() {
        return _this.get('dealerHand').models[0].flip();
      };
    })(this)), 500);
    playerScore = this.get('playerHand').scores()[0];
    if (this.get('dealerHand').scores()[0] === 21 && playerScore === !21) {
      this.set('handStatus', 'dealerBlackjack');
    }
    _results = [];
    while (this.get('dealerHand').scores()[0] < 17 && this.get('dealerHand').scores()[0] < playerScore && this.get('dealerHand').scores()[1] < 17 && this.get('dealerHand').scores()[1] < playerScore) {
      _results.push(this.get('dealerHand').hit());
    }
    return _results;
  };

  return App;

})(Backbone.Model);
