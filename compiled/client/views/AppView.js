// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      this.displayResult = __bind(this.displayResult, this);
      this.checkForHandOver = __bind(this.checkForHandOver, this);
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.template = _.template('<button class="hit-button pure-button button-secondary">Hit</button> <button class="stand-button pure-button button-error">Stand</button> <div class="player-hand-container"></div> <div class="dealer-hand-container"></div>');

    AppView.prototype.events = {
      "click .hit-button": function() {
        return this.model.get('playerHand').hit();
      },
      "click .stand-button": function() {
        return this.model.get('playerHand').stand();
      }
    };

    AppView.prototype.initialize = function() {
      this.render();
      return this.model.on('change:handStatus', this.checkForHandOver);
    };

    AppView.prototype.render = function() {
      this.$el.children().detach();
      this.$el.html(this.template());
      this.$('.player-hand-container').html(new HandView({
        collection: this.model.get('playerHand')
      }).el);
      return this.$('.dealer-hand-container').html(new HandView({
        collection: this.model.get('dealerHand')
      }).el);
    };

    AppView.prototype.checkForHandOver = function() {
      console.log('getting HERE');
      console.log(this.model.get('handStatus'));
      return this.displayResult();
    };

    AppView.prototype.displayResult = function() {
      console.log('here and there', this.model.get('handStatus'));
      if (this.model.get('handStatus') === 'playerBlackjack') {
        alert('Blackjack!!! You win!!!');
      }
      if (this.model.get('handStatus') === 'dealerBlackjack') {
        alert('Dealer Blackjack. You lost');
      }
      if (this.model.get('handStatus') === 'playerBust') {
        alert('Bust. You went over 21.');
      }
      if (this.model.get('handStatus') === 'dealerBust') {
        alert('Dealer busts. You win!!!');
      }
      if (this.model.get('handStatus') === 'dealerWin') {
        alert('Dealer wins.');
      }
      if (this.model.get('handStatus') === 'playerWin') {
        alert('Player wins.');
      }
      if (this.model.get('handStatus') === 'push') {
        alert('Push. Player and dealer have same score');
      }
      return setTimeout(location.reload(), 500);
    };

    return AppView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=AppView.map
